---
title: "ETL geoespacial"
---

## Pipeline recomendado

```sql
BEGIN;
  -- 1. Limpieza de staging
  TRUNCATE TABLE stg.veredas_norm;

  -- 2. Reconstrucción con script oficial
  \i stg_veredas_norm_build.sql

  -- 3. Validaciones rápidas
  SELECT COUNT(*) FROM stg.veredas_norm;
  SELECT COUNT(*) FROM stg.veredas_norm WHERE NOT ST_IsValid(geom);
ROLLBACK; -- Cambie a COMMIT cuando las validaciones pasen
```

## Transformaciones frecuentes

1. **Normalización de nombres**: usar `INITCAP` y diccionarios de equivalencias.
2. **Remuestreo geométrico**: `ST_SimplifyPreserveTopology` para vistas web.
3. **Enriquecimiento**: unir atributos de uso de suelo, climatología y campañas productivas.

```sql
WITH upas AS (
  SELECT upa_id,
         municipio,
         geom
  FROM stg.upas_norm
),
veredas AS (
  SELECT vereda_codigo,
         municipio,
         departamento,
         geom
  FROM stg.veredas_norm
)
SELECT v.vereda_codigo,
       v.municipio,
       u.upa_id,
       ST_Area(ST_Intersection(v.geom, u.geom)) / 10000 AS area_interseccion_ha
FROM veredas v
JOIN upas u
  ON ST_Intersects(v.geom, u.geom);
```

## Automatización con cron

- Guarde scripts en `ops/` con logs diarios.
- Documente cada tarea programada en `ESTRUCTURA_FINAL_BD.md`.
- Aplique `harden_to_scram.sh` antes de distribuir credenciales.

## QA y exportes

- Carpeta `reportes_cartografia/` para salidas PDF y geopackages.
- Correr `consultas/top_veredas_upas_tolima.sql` como smoke test tras cada actualización.
- Usar QGIS para revisar simbología y publicar mapas en GeoPackage.
